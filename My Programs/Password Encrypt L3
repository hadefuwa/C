/*

/***************************************************************************************
 * File:        password_encryption.c
 * Author:      Hamed Adefuwa
 * Date:        2024-06-29
 * Description: This is just a test algorithm for encrypting passwords. It's something 
 *              I would have liked to have done on PLCs or HMIs in Controls & Automation 
 *              but never got around to doing. In the process of learning C, I figured 
 *              I'd do it here.
 ***************************************************************************************

Encrypt Function:

Input Parameters: Takes input (the original password) and output (to store the encrypted password).
Prepending: Prepend the fixed string "OTL" to the input password.
Shifting: Shift each character of the prepended string by 1.
Inserting Full Stops: Insert a full stop . every 5 characters in the shifted string.
Null-Termination: Ensure the encrypted string is properly null-terminated.
Decrypt Function:

Input Parameters: Takes input (the encrypted password) and output (to store the decrypted password).
Removing Full Stops: Remove all full stops . from the encrypted string.
Shifting Back: Shift each character back by 1 in the intermediate string.
Removing Prepend: Remove the fixed string "OTL" from the beginning of the shifted-back string.
Null-Termination: Ensure the decrypted string is properly null-terminated.
Main Program:

Input Handling: Takes the password input from the user.
Remove Newline: Remove the newline character from the input password using strcspn.
Encrypting Password: Encrypt the password using the encrypt function.
Display Encrypted Password: Print the encrypted password.
Decrypting Password: Decrypt the password using the decrypt function.
Display Decrypted Password: Print the decrypted password to verify correctness.

*/


#include <stdio.h>
#include <string.h> // Need this library for string manipulation functions like strcspn, strcpy, and strcat

//-------------------------------------------Encrypt Function--------------------------------------------------------------------------------------//
void encrypt(char *input, char *output) {
    int len = strlen(input); // Determine the length of the input string and store it in 'len'

    const char *prepend_str = "OTL"; //the string we'll be pre-prending is fixed as OTL
    int prepend_len = strlen(prepend_str); // Calculate the length of the prepended string

    // To store the prepended string "OTL" + input - this is 63 characters, more than needed really, 
    // just in case a programmer decides to increase the appended text or max password size
    // 34 would be sufficient here, since the password is 30 char long, + 3 for the appended + 1 for null char
    char prepended[63]; 

    // Prepend the fixed string "OTL" to the input
    strcpy(prepended, prepend_str); // Copy "OTL" to the beginning of the prepended array
    strcat(prepended, input); // Concatenate the input string (the password) to "OTL"

    //len += prepend_len;
    len = prepend_len + len; // Adjust length to include the length of the prepended string

    char shifted[63]; // To store the shifted characters, making sure it's large enough

    // First, shift each character by 1
    for (int i = 0; i < len; i++) {
        shifted[i] = prepended[i] + 1;
    }
    shifted[len] = '\0'; // null-terminate the shifted string

    // Then, insert a full stop every 5 characters
    int j = 0;
    int count = 0;
    for (int i = 0; i < len; i++) {
        if (count == 5) {
            output[j++] = '.'; // Insert a full stop
            count = 0; // Reset the count
        }
        output[j++] = shifted[i]; // Copy the shifted character to output
        count++;
    }
    output[j] = '\0'; // null-terminate the encrypted string
}

//-------------------------------------------Decrypt Function--------------------------------------------------------------------------------------//
void decrypt(char *input, char *output) {
    int len = strlen(input);
    char temp[63]; // To store the intermediate result after removing full stops

    // First, remove the full stops
    int j = 0;
    for (int i = 0; i < len; i++) {
        if (input[i] != '.') {
            temp[j++] = input[i]; // Copy characters except full stops
        }
    }
    temp[j] = '\0'; // null-terminate the intermediate result

    // Then, shift each character back by 1
    len = strlen(temp);
    char shifted_back[63]; // To store the shifted-back characters
    for (int i = 0; i < len; i++) {
        shifted_back[i] = temp[i] - 1;
    }
    shifted_back[len] = '\0'; // null-terminate the shifted-back string

    // Remove the fixed prepended string "OTL"
    const char *prepend_str = "OTL";
    int prepend_len = strlen(prepend_str); // Calculate the length of the prepended string

    if (strncmp(shifted_back, prepend_str, prepend_len) == 0) {
        strcpy(output, shifted_back + prepend_len); // Copy the string after "OTL"
    } else {
        // In case something went wrong, copy the entire shifted_back string
        strcpy(output, shifted_back);
    }
}

//-------------------------------------------Main Program--------------------------------------------------------------------------------------//
int main() {
    char password[30];
    char encryptedPassword[63]; // Made it larger to accommodate possible increase in length
    char decryptedPassword[30];

    // Code here to take input from the user
    printf("Enter your password: ");
    fgets(password, 30, stdin);

    // Remove the newline character added by fgets
    // strcspn (string complement span) is used to find the first occurrence of any character from the second argument in the first argument.
    // By assigning 0 (null terminator, \0) to password[strcspn(password, "\n")], you replace the newline character with a null terminator 0.
    password[strcspn(password, "\n")] = 0;

    //-------------------------------------------Encrypt The Password--------------------------------------------------------------------------------------//

    // Encrypt the password by first prepending "OTL", then shifting characters, and finally inserting full stops every 5 characters
    encrypt(password, encryptedPassword);
    
    // Code to display encrypted password
    printf("Encrypted password: %s\n", encryptedPassword);

    //-------------------------------------------Decrypt The Password--------------------------------------------------------------------------------------//    

    // Decrypt the password by reversing the process: removing full stops, shifting characters back, and removing the prepended "OTL"
    decrypt(encryptedPassword, decryptedPassword);

    // Code to display decrypted password
    printf("Decrypted password: %s\n", decryptedPassword);

    return 0;
}
