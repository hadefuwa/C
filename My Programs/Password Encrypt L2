#include <stdio.h>
#include <string.h> // need this library for strcspn

void encrypt(char *input, char *output) {
    int len = strlen(input);
    char shifted[60]; // To store the shifted characters, making sure it's large enough

    // First, shift each character by 1
    for (int i = 0; i < len; i++) {
        shifted[i] = input[i] + 1;
    }
    shifted[len] = '\0'; // null-terminate the shifted string

    // Then, insert a full stop every 5 characters
    int j = 0;
    int count = 0;
    for (int i = 0; i < len; i++) {
        if (count == 5) {
            output[j++] = '.';
            count = 0;
        }
        output[j++] = shifted[i];
        count++;
    }
    output[j] = '\0'; // null-terminate the encrypted string
}

void decrypt(char *input, char *output) {
    int len = strlen(input);
    char temp[60]; // To store the intermediate result after removing full stops

    // First, remove the full stops
    int j = 0;
    for (int i = 0; i < len; i++) {
        if (input[i] != '.') {
            temp[j++] = input[i];
        }
    }
    temp[j] = '\0'; // null-terminate the intermediate result

    // Then, shift each character back by 1
    len = strlen(temp);
    for (int i = 0; i < len; i++) {
        output[i] = temp[i] - 1;
    }
    output[len] = '\0'; // null-terminate the final decrypted string
}

int main() {
    char password[30];
    char encryptedPassword[60]; // Make it larger to accommodate possible increase in length
    char decryptedPassword[30];

    // code here to take input from the user
    printf("Enter your password: ");
    fgets(password, 30, stdin);

    // remove the newline character added by fgets
    // strcspn (string complement span) is used to find the first occurrence of any character from the second argument in the first argument.
    // By assigning 0 (null terminator, \0) to password[strcspn(password, "\n")], you replace the newline character with a null terminator 0.
    password[strcspn(password, "\n")] = 0;

    //-------------------------------------------Encrypt The Password--------------------------------------------------------------------------------------//

    // Encrypt the password by first shifting characters and then inserting full stops every 5 characters
    encrypt(password, encryptedPassword);
    
    // code to display encrypted password
    printf("Encrypted password: %s\n", encryptedPassword);

    //-------------------------------------------Decrypt The Password--------------------------------------------------------------------------------------//    

    // Decrypt the password by reversing the process: first removing full stops, then shifting characters back
    decrypt(encryptedPassword, decryptedPassword);

    // code to display decrypted password
    printf("Decrypted password: %s\n", decryptedPassword);

    return 0;
}